# FUNCTIONS
displayBanner() {
    clear
    head -n 1 $dshieldDirectory/bin/banner.txt; sleep .25
    head -n 2 $dshieldDirectory/bin/banner.txt; sleep .25
    head -n 3 $dshieldDirectory/bin/banner.txt; sleep .25
    head -n 4 $dshieldDirectory/bin/banner.txt; sleep .25
    head -n 5 $dshieldDirectory/bin/banner.txt; sleep .25
    head -n 6 $dshieldDirectory/bin/banner.txt; sleep .25
    head -n 7 $dshieldDirectory/bin/banner.txt; sleep .25
    head -n 8 $dshieldDirectory/bin/banner.txt; sleep .5
    echo
}

userDateSelection() {
date="$(dialog --stdout --date-format %Y-%m-%d --calendar "Select a Date.  Limited to one day." 0 0 15 12 2023)"
echo
echo $date

# Validate date input restricts to years 2022-2024, and "calendar valid" MM and DD
if [[ $date =~ ^[2][0][2][2-4]{1}-[0-1]{1}[0-2]{1}-[0-3]{1}[0-9]{1}$ ]]
  then echo .
        echo "Date format is valid, fetching Honeypot logs for $date"
  else echo .
        echo "Invalid format (not YYYY-MM-DD or not in allowed range.)"
        date=
        read -n 1 -s -r -p "Press any key to continue"
        clear
fi
}

fetchHoneypot() {
    /usr/bin/clear
    echo "--- Fetching DShield Honeypot Logs from Sensors --- " ${probes[@]}
	for sensor in "${probes[@]}"
	do
	echo "Fetching from sensor:" $sensor
        echo "Honeypot Logs..."
        /usr/bin/scp -P $sshPort -i $sshKey $user@$sensor.$domain:/logs/webhoneypot-*.json $logDir/$sensor/
        /usr/bin/ssh -i $sshKey $user@$sensor.$domain -p $sshPort 'sudo rm -f /logs/webhoneypot-*.json'
        echo "Finished" $sensor
        echo
	done
    echo "DShield fetch is complete."
}

webhoneypot2sqlite3() {
    /usr/bin/clear
    echo 
    echo "Examination of all sensors for a single 24 hour period are provided."
    echo "If we have a webhoneypot-YYYY-MM-DD.json logfile for your date, it will be analyzed."
    echo 
    echo 
    while [ -z $date ]
    do
        userDateSelection
    done
    clear
    userDate=$date
    rm $dbDir/webhoneypot.db3
    sqlite3 $dbDir/webhoneypot.db3 "CREATE TABLE "webHoneyPot"("time" TEXT,"headers" TEXT,"sip" TEXT,"dip" TEXT,"method" TEXT,"url" TEXT,"data" TEST,"useragent" TEXT,"version" TEXT,"response_id" TEXT,"signature_id" TEXT,sensorName TEXT)"
    for sensor in "${probes[@]}"
    do
      # Use the specific date from user for .json.
      for X in $dshieldDirectory/logs/$sensor/webhoneypot-$userDate.json
        do
            echo sensor: $sensor
            echo "Pulling $X log into Sqlite database --- "           
            # Correctly we split the function into two commands.  Overwrite temp file each pass for sensor
            (head -1 $X | jq -r 'keys_unsorted | @csv') | head -1 > $dbDir/webhoneypottemp.csv 
            # export each record to csv
            jq -r 'map(tostring) | @csv' < $X >> $dbDir/webhoneypottemp.csv
            # Let's make a Master table
            sqlite3 $dbDir/webhoneypot.db3 ".import --csv $dbDir/webhoneypottemp.csv webHoneyPot" > /dev/null 2>&1
    #        sqlite3 $dbDir/webhoneypot.db3 "ALTER TABLE webHoneyPot ADD COLUMN sensorName TEXT"  > /dev/null 2>&1
            sqlite3 $dbDir/webhoneypot.db3 "UPDATE webHoneyPot SET sensorName='$sensor' WHERE sensorName IS NULL"  > /dev/null 2>&1
        done
    done
    sqlite3 $dbDir/webhoneypot.db3 "DELETE FROM webHoneyPot WHERE time ='time'"  > /dev/null 2>&1
    sqlite3 $dbDir/webhoneypot.db3 "ALTER TABLE webHoneyPot DROP COLUMN response_id" > /dev/null 2>&1
    sqlite3 $dbDir/webhoneypot.db3 "ALTER TABLE webHoneyPot DROP COLUMN signature_id" > /dev/null 2>&1
    sqlite3 $dbDir/webhoneypot.db3 "ALTER TABLE webHoneyPot DROP COLUMN data" > /dev/null 2>&1
    
    read -n 1 -s -r -p "Press any key to continue"
    # reset/clear date and userDate for next iteration.
    date=
    userDate=
    clear
}

sensorTopIP() {
    clear
    echo
    echo
    echo "Top Source IP By Sensor with Count"
    cat $sqlDir/topSource.sql | sqlite3 $dbDir/webhoneypot.db3 > $dbDir/temp.log
    cat $dbDir/temp.log
    read -n 1 -s -r -p "Press any key to continue...  "
    rm $dbDir/temp.log
 }

 sensorTopURL() {
    clear
    echo
    echo
    echo "Top URL By Sensor with Count"
    cat $sqlDir/topURL.sql | sqlite3 $dbDir/webhoneypot.db3 > $dbDir/temp.log
    cat $dbDir/temp.log
    read -n 1 -s -r -p "Press any key to continue...  "
    rm $dbDir/temp.log
 }

everyHoneypot2sqlite3() {
    rm $dbDir/everywebhoneypot.db3
    # Let's make a table
    read -n 1 -s -r -p "Press any key to continue...  "
    sqlite3 $dbDir/everywebhoneypot.db3 "CREATE TABLE "webHoneyPot"("time" TEXT,"headers" TEXT,"sip" TEXT,"dip" TEXT,"method" TEXT,"url" TEXT,"data" TEST,"useragent" TEXT,"version" TEXT,"response_id" TEXT,"signature_id" TEXT,sensorName TEXT)"
    for sensor in "${probes[@]}"
    do
      for X in $dshieldDirectory/logs/$sensor/webhoneypot-*.json
        do
            echo sensor: $sensor
            echo "Pulling $X log into Sqlite database --- "           
            # Correctly we split the function into two commands.  Overwrite temp file each pass for sensor
            (head -1 $X | jq -r 'keys_unsorted | @csv') | head -1 > $dbDir/everywebhoneypottemp.csv
            # export each record to csv
            jq -r 'map(tostring) | @csv' < $X >> $dbDir/everywebhoneypottemp.csv
            # Let's make a table
            sqlite3 $dbDir/everywebhoneypot.db3 ".import --csv $dbDir/everywebhoneypottemp.csv webHoneyPot" > /dev/null 2>&1
            #sqlite3 $dbDir/everywebhoneypot.db3 "ALTER TABLE webHoneyPot ADD COLUMN sensorName TEXT" > /dev/null 2>&1
            sqlite3 $dbDir/everywebhoneypot.db3 "UPDATE webHoneyPot SET sensorName='$sensor' WHERE sensorName IS NULL" > /dev/null 2>&1
        done
    done
    sqlite3 $dbDir/everywebhoneypot.db3 "DELETE FROM webHoneyPot WHERE time ='time'"  > /dev/null 2>&1
    sqlite3 $dbDir/everywebhoneypot.db3 "ALTER TABLE webHoneyPot DROP COLUMN response_id" > /dev/null 2>&1
    sqlite3 $dbDir/everywebhoneypot.db3 "ALTER TABLE webHoneyPot DROP COLUMN signature_id" > /dev/null 2>&1
    sqlite3 $dbDir/everywebhoneypot.db3 "ALTER TABLE webHoneyPot DROP COLUMN data" > /dev/null 2>&1
    read -n 1 -s -r -p "Press any key to continue"
}

sensorTopIPEvery() {
    clear
    echo
    echo
    echo "Top Source IP By Sensor with Count for All of (logged) Time"
    cat $sqlDir/topSource.sql | sqlite3 $dbDir/everywebhoneypot.db3 > $dbDir/temp.log
    cat $dbDir/temp.log
    read -n 1 -s -r -p "Press any key to continue...  "
    rm $dbDir/temp.log
 }

 sensorTopURLEvery() {
    clear
    echo
    echo
    echo "Top URL By Sensor with Count for All of (logged) Time"
    cat $sqlDir/topURL.sql | sqlite3 $dbDir/everywebhoneypot.db3 > $dbDir/temp.log
    cat $dbDir/temp.log
    read -n 1 -s -r -p "Press any key to continue...  "
    rm $dbDir/temp.log
 }

fetchDShieldFirewallLog() {
    /usr/bin/clear
    clear
    echo "--- Fetching DShield Firewall Log from Sensors --- " ${probes[@]}
	for sensor in "${probes[@]}"
	do
	echo "Fetching from sensor:" $sensor
        echo "Firewall Log..."
        /usr/bin/scp -P $sshPort -i $sshKey $user@$sensor.$domain:/logs/localDshield.log* $logDir/$sensor/
        /usr/bin/ssh -i $sshKey $user@$sensor.$domain -p $sshPort 'sudo rm -f /logs/localDshield.log-*;sudo rm -f /logs/localDshield.log.1*'
        echo "Finished" $sensor
        echo
	done
    echo "DShield fetch is complete."

}

firewall2sqlite3() {
    rm $dbDir/localDshield.log $dbDir/firewall.db3
    sqlite3 $dbDir/firewall.db3 "CREATE TABLE "firewallTable"("time" TEXT,"flags" TEXT,"sip" TEXT,"dip" TEXT,"proto" TEXT,"sport" TEXT,"dport" TEXT, sensorName TEXT)"
    for sensor in "${probes[@]}"
	do
        cp $dshieldDirectory/logs/$sensor/localDshield.log $dbDir/.
        sed -i '/^#/d' $dbDir/localDshield.log
        cat $dbDir/localDshield.log | jq -r '.logs | map([.time, .flags, .sip, .dip, .proto, .sport, .dport] | join(", ")) | join("\n")' > $dbDir/firewallTemp.csv
        sqlite3 $dbDir/firewall.db3 ".import --csv $dbDir/firewallTemp.csv firewallTable" > /dev/null 2>&1
        sqlite3 $dbDir/firewall.db3 "UPDATE firewallTable SET sensorName='$sensor' WHERE sensorName IS NULL" > /dev/null 2>&1
    done
    sqlite3 $dbDir/firewall.db3 "UPDATE firewallTable SET time = datetime(time, 'unixepoch', 'localtime')"
}

everyfirewall2sqlite3() {
    rm $dbDir/everylocalDshield.log $dbDir/everyfirewall.db3
    sqlite3 $dbDir/everyfirewall.db3 "CREATE TABLE "firewallTable"("time" TEXT,"flags" TEXT,"sip" TEXT,"dip" TEXT,"proto" TEXT,"sport" TEXT,"dport" TEXT, sensorName TEXT)"
    for sensor in "${probes[@]}"
	do
        #cp $dshieldDirectory/logs/$sensor/localDshield.log $dbDir/.
        cat $dshieldDirectory/logs/$sensor/localDshield.log* > $dbDir/everylocalDshield.log
        sed -i '/^#/d' $dbDir/everylocalDshield.log
        cat $dbDir/everylocalDshield.log | jq -r '.logs | map([.time, .flags, .sip, .dip, .proto, .sport, .dport] | join(", ")) | join("\n")' > $dbDir/everyfirewallTemp.csv
        sqlite3 $dbDir/everyfirewall.db3 ".import --csv $dbDir/everyfirewallTemp.csv firewallTable" > /dev/null 2>&1
        sqlite3 $dbDir/everyfirewall.db3 "UPDATE firewallTable SET sensorName='$sensor' WHERE sensorName IS NULL" > /dev/null 2>&1
    done
    sqlite3 $dbDir/everyfirewall.db3 "UPDATE firewallTable SET time = datetime(time, 'unixepoch', 'localtime')"
}

fetchTTY() {
    /usr/bin/clear
    echo "--- Fetching TTY Logs from Sensors --- " ${probes[@]}
	for sensor in "${probes[@]}"
	do
	echo "Fetching from sensor:" $sensor
        echo "Fetching TTY Logs..."
        # using the -p option of scp we retain creation time for TTY log file and copy them to local TTY/sensor directory
        /usr/bin/scp -P $sshPort -i $sshKey -p $user@$sensor.$domain:/srv/cowrie/var/lib/cowrie/tty/* $dshieldDirectory/TTY/$sensor/
        echo "Flushing TTY Logs..."
        /usr/bin/ssh -i $sshKey $user@$sensor.$domain -p $sshPort 'sudo rm /srv/cowrie/var/lib/cowrie/tty/*'
        echo "Fetching cowrie.json.YYYY-MM-DD files..."
        /usr/bin/scp -P $sshPort -i $sshKey -p $user@$sensor.$domain:/logs/cowrie.json.* $dshieldDirectory/logs/$sensor/
        echo "Flushing cowrie.json.YYYY-MM-DD files..."
        /usr/bin/ssh -i $sshKey $user@$sensor.$domain -p $sshPort 'sudo rm /logs/cowrie*'
	done
    echo "DShield TTY Log fetch is complete."

}

viewTTY () {
    /usr/bin/clear
     printf "\n\n\n\n\n\n\n\n"
    echo "		viewTTY coming soon"
    read -n 1 -s -r -p "Press any key to continue"
}

fetchDownloads() {
    /usr/bin/clear
    echo "--- Fetching Downloads from Sensors --- " ${probes[@]}
	for sensor in "${probes[@]}"
	do
	echo "Fetching from sensor:" $sensor
        echo "Downloads..."
        /usr/bin/ssh -i $sshKey $user@$sensor.$domain -p $sshPort 'sudo chown dshield /srv/cowrie/var/lib/cowrie/downloads/ -R; cd /srv/cowrie/var/lib/cowrie/downloads/; 
        datestamp=$(date +"%Y-%m-%d"); sudo zip -e -P infected /logs/$datestamp.downloads.zip . /srv/cowrie/var/lib/cowrie/downloads/*;
        sudo rm -f /srv/cowrie/var/lib/cowrie/downloads/*'
        /usr/bin/scp -P $sshPort -i $sshKey $user@$sensor.$domain:/logs/$datestamp.downloads.zip $dshieldDirectory/downloads/$sensor/
        /usr/bin/ssh -i $sshKey $user@$sensor.$domain -p $sshPort "sudo rm /logs/$datestamp.downloads.zip"
	done
    echo "DShield Download fetch is complete."

}

extractDownloads () {
    /usr/bin/clear
     printf "\n\n\n\n\n\n\n\n"
    echo "		extractDownloads coming soon"
    read -n 1 -s -r -p "Press any key to continue"
}

fetchStatus() {
    /usr/bin/clear
    echo "Current Status of DShield Sensors --- " ${probes[@]}
    for sensor in "${probes[@]}"
    do
    echo sensor: $sensor
    /usr/bin/ssh -i $sshKey $user@$sensor.$domain -p $sshPort 'sudo /srv/dshield/status.sh' | \
    sed -n -e '/### Are My Reports Received/ { n; N; N; N; N; N; N; N; N; N; N; N; N; N; N; N; N; N; N; N; N; N; N; N;h; }' -e '$ { g; /./p; }'
    echo
    read -n 1 -s -r -p "Press any key to continue"
    /usr/bin/clear
    done
}

fetchPackets() {
    /usr/bin/clear
    echo "--- Fetching DShield Packets from Sensors --- " ${probes[@]}
	for sensor in "${probes[@]}"
	do
        echo "Fetching Packet Captures...:" $sensor
        /usr/bin/scp -P $sshPort -i $sshKey $user@$sensor.$domain:/pcap/* $packetDir/$sensor
        echo "Purging sensor packet capture file(s)"
        /usr/bin/ssh -i $sshKey $user@$sensor.$domain -p $sshPort 'sudo rm -f /pcap/*'
        echo "Finished" $sensor
	done
    echo "Packet fetch is complete."
  
}

extractPackets() {
    /usr/bin/clear
    echo "--- Extracting DShield Packet Captures --- " ${probes[@]}
	for sensor in "${probes[@]}"
	do
	echo "Extracting and Archiving Packets for" $sensor
        for tarBall in $packetDir/$sensor/*.gz
        do
        tar zxfv $tarBall -C $packetDir/$sensor/.
        mv $tarBall $packetArchive/$sensor
        done
	    echo "..."
	done
    echo "Extraction Complete."
    read -n 1 -s -r -p "Press any key to continue"
}

uploadPackets() {
#    /usr/bin/clear
    echo "--- Importing DShield packet captures for probes --- " ${probes[@]}
	for sensor in "${probes[@]}"
	do
        echo "Flushing working directory..."
        /usr/bin/ssh nefario@dshield-so-import.1on1security.lan "rm -f /var/working/*.pcap"
        echo "Uploading for $sensor files to working directory..."
        /usr/bin/scp $packetDir/$sensor/*.pcap nefario@dshield-so-import.1on1security.lan:/var/working/.
        echo "Importing into Security Onion..."
        /usr/bin/ssh nefario@dshield-so-import.1on1security.lan "sudo so-import-pcap /var/working/*.pcap"
	done
    echo "Import Complete."
    read -n 1 -s -r -p "Press any key to continue"
}

executeRemoteCommand() {
    /usr/bin/clear
    printf "\n\n\n\n\n\n\n\n"
    # Prompt the user for command
    echo "Enter simple commnand.  Remember, you're executing as the dshield user."
    echo
    echo "You need to prepend your command with sudo for most administrative functions."
    echo
    echo "W A R N I N G !  W A R N I N G !  W A R N I N G !"
    echo "I'm doing ZERO input validation here.  BE WARNED!"
    echo
    read -p "Enter your command: " remoteCommand
    echo
    echo $remoteCommand
    for sensor in "${probes[@]}"
	do
    echo "Executing on $sensor"
    echo
    /usr/bin/ssh -i $sshKey $user@$sensor.$domain -p $sshPort $remoteCommand
    echo
    read -n 1 -s -r -p "Press any key to continue"
    echo
    done
}

flushRemote() {
    /usr/bin/clear
    printf "\n\n\n\n\n\n\n\n"
    echo "		flushRemote coming soon"
    read -n 1 -s -r -p "Press any key to continue"
}

flushLocal() {
    /usr/bin/clear
    printf "\n\n\n\n\n\n\n\n"
    echo "Flushing local logs..."
	for sensor in "${probes[@]}"
	do
	/usr/bin/find $logDir -name *.json -delete
	/usr/bin/find $logDir -name *.zip -delete
	/usr/bin/find $logDir -name *.log -delete
	/usr/bin/find $logDir -name syslog* -delete
	done
    printf "\n\n\n\n\n\n\n\n"
    read -n 1 -s -r -p "Press any key to continue"
}
